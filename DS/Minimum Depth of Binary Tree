#include <bits/stdc++.h>  // Universal header file
using namespace std;  // Using the standard namespace

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

int minDepth(TreeNode* root) {
    if (root == NULL) {
        return 0;  // If the tree is empty, the minimum depth is 0.
    }
    
    queue<pair<TreeNode*, int>> q;  // A queue to store pairs of node and depth.
    q.push({root, 1});  // Start with the root node at depth 1.
    
    while (!q.empty()) {
        TreeNode* node = q.front().first;
        int depth = q.front().second;
        q.pop();
        
        // If we encounter a leaf node, return its depth.
        if (node->left == NULL && node->right == NULL) {
            return depth;
        }
        
        // Otherwise, add the children to the queue with incremented depth.
        if (node->left) {
            q.push({node->left, depth + 1});
        }
        if (node->right) {
            q.push({node->right, depth + 1});
        }
    }
    
    return 0;  // This line should never be reached if the tree is non-empty.
}

// Helper function to create a new node.
TreeNode* createNode(int val) {
    return new TreeNode(val);
}

int main() {
    // Construct the binary tree
    TreeNode* root = createNode(3);
    root->left = createNode(9);
    root->right = createNode(20);
    root->right->left = createNode(15);
    root->right->right = createNode(7);
    
    // Output the minimum depth of the binary tree
    cout << "Minimum Depth of the Binary Tree: " << minDepth(root) << endl;
    
    return 0;
}
